module pc_unit (
    input clk,  // clock
    input rst,  // reset
    input slowclk, // slowclock to advance pc
    input id[16],
    input pcsel[3],
    input reg_data_1[32],
    output pc_4[32],
    output pc_4_sxtc[32],
    output pcsel_out[32], // for debug only, does not exist in pc_unit
    output ia[32]
  ) {

  dff pc[32](#INIT(0),.clk(clk)); // PC Register

  sig pcsel_out_sig[32];
  sig pc_4_sxtc_32_sig[32];
  sig pc_4_sxtc_sig[32];
  sig pc_4_sig[32];
  
  always {
  
    // initial setups to silence output compilation errors
    pc_4_sig = 0;
    pc_4_sxtc_sig = 0;
    pcsel_out_sig = 0;
    
    // increment pc by 4
    pc_4_sig = c{pc.q[31], pc.q[30:0] + 4};            

    // shift-and-add pc by 4
    pc_4_sxtc_32_sig = pc.q + 4 + c{14x{id[15]},id[15:0],2b00};
    pc_4_sxtc_sig = c{pc.q[31], pc_4_sxtc_32_sig[30:2],2b00};

    // PCSEL mux 
    case (pcsel[2]){
      // consider all cases of pcsel signals 
      // for JMP, make sure to compute the supervisor bit properly 
      // for ILLOP and IRQ handlers, ensure that the supervisor bit is set to 1
      0: case (pcsel[1:0]){
          2b00: pcsel_out_sig = pc_4_sig;
          2b01: pcsel_out_sig = pc_4_sxtc_sig;
          2b10: pcsel_out_sig = c{pc.q[31] ? reg_data_1[31] : 0, reg_data_1[30:2], 2b00}; //JMP
          2b11: pcsel_out_sig = 32h80000004; //ILLOP - 011
          default: pcsel_out_sig = pc.q;
         }      
      1: pcsel_out_sig = 32h80000008; //XAddr - 100
      default: // just a default case to silence warnings 
        pcsel_out_sig = pc.q;
     }
    
    // advance the PC only when slowclk is 1 
    if (slowclk){
      // set the content of pcreg to be its next value only when slowclk == 1
      pc.d = c{pcsel_out_sig[31:2], b00};
    }

    // RESET mux 
    if(rst){
      pc.d = 32h80000000;
    }
    
    // output connections
    ia = pc.q;
    pc_4 =  pc_4_sig;
    pc_4_sxtc = pc_4_sxtc_sig;
    pcsel_out = pcsel_out_sig;    
  }
}
