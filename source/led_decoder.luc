module led_decoder #(
    COLUMN_DIMENSION = 30 : COLUMN_DIMENSION > 0,
    ROW_DIMENSION = 15 : ROW_DIMENSION > 0,
    ENCODING_AMOUNT = 4 : ENCODING_AMOUNT > 0 // The number of colors.
  )(
    input clk,              // clock
    input rst,
    output color_data[COLUMN_DIMENSION *  ROW_DIMENSION*$clog2(ENCODING_AMOUNT)], // to the temp dff
    input player1[6],//BLUE(y)
    input player2[6],//RED(y)
    input p1_b1_x[6],//BLUEballs
    input p1_b2_x[6],
    input p1_b3_x[6],
    input p1_b1_y[6],
    input p1_b2_y[6],
    input p1_b3_y[6],
    input p2_b1_x[6],//RED balls
    input p2_b2_x[6],
    input p2_b3_x[6],
    input p2_b1_y[6],
    input p2_b2_y[6],
    input p2_b3_y[6],
    input player_1_won,//1 if win 0 if lost
    input player_2_won,
    input blink,
    input fsm_state[2],
    input debug,
    input debug_package[450]
    ){
        
        var index, index_2;
        const WIN_ARRAY = {9d62, 9d243, 9d364, 9d365, 9d276, 9d247, 9d278, 9d369, 9d370, 9d251, 9d72, 
        9d75, 9d78, 9d109, 9d140, 9d171, 9d202, 9d233, 9d264, 9d295, 9d326, 9d87, 9d92, 9d273, 9d306, 
        9d308, 9d281, 9d102, 9d105, 9d108, 9d139, 9d170, 9d201, 9d232, 9d263, 9d294, 9d325, 9d356, 
        9d117, 9d122, 9d303, 9d336, 9d338, 9d311, 9d132, 9d165, 9d138, 9d147, 9d152, 9d333, 9d341, 
        9d162, 9d195, 9d168, 9d177, 9d182, 9d192, 9d225, 9d198, 9d207, 9d212, 9d222, 9d255, 9d228, 
        9d237, 9d285, 9d258, 9d267, 9d315, 9d288, 9d297, 9d345, 9d318, 9d327, 9d375, 9d348, 9d357, 
        9d378, 9d387};
        const SHADOW_ARRAY = {9d63, 9d73, 9d76, 9d79, 9d88, 9d93, 9d103, 9d106, 9d110, 9d118, 9d123, 
        9d133, 9d141, 9d148, 9d153, 9d163, 9d166, 9d169, 9d172, 9d178, 9d183, 9d193, 9d196, 9d199, 
        9d203, 9d208, 9d213, 9d223, 9d226, 9d229, 9d234, 9d238, 9d244, 9d248, 9d252, 9d256, 9d259, 
        9d265, 9d268, 9d274, 9d277, 9d279, 9d282, 9d286, 9d289, 9d296, 9d298, 9d304, 9d307, 9d309, 
        9d312, 9d316, 9d319, 9d328, 9d334, 9d337, 9d339, 9d342, 9d346, 9d349, 9d358, 9d366, 9d371, 
        9d376, 9d379, 9d388};
        
        const PLAYER_SIZE = 5;
        const PIXEL_COUNT = COLUMN_DIMENSION *  ROW_DIMENSION;
        const BIT_COUNT = PIXEL_COUNT*$clog2(ENCODING_AMOUNT);
        const LAST_PIXEL_INDEX = BIT_COUNT-$clog2(ENCODING_AMOUNT);
        const Y_OFFSET = COLUMN_DIMENSION*$clog2(ENCODING_AMOUNT);
        const X_OFFSET = $clog2(ENCODING_AMOUNT);
        const PLAYER_OFFSET = Y_OFFSET-X_OFFSET;
        // Blank(000), Red(001), Blue(010), Purple(011), Green(100), Yellow(101), Cyan(110), White(111)
        dff led_color[BIT_COUNT](.clk(clk),.rst(rst));
  
        //debug variables
        var i;
        
        always{
            led_color.d = BIT_COUNTx{1b0}; //initalize empty grid
            if (!debug) {
                case(fsm_state){
                    0:
                        if(blink){
                            led_color.d = 1350b
                        }
                        else{
                            led_color.d = 1350b000001001001000000000000000000101101101101101101101000000000000000000000000000001001001000001000000000001000000000000101101101101101101101101101101000000000000000000001000000000001000001000000000000000000101101101101101101101101101101101101000000000000000001000000000001000000001000000000000000101101101101101101101101101101101101101000000000000001001001000001000000000001000000000000101101101101101101101101101101101101101101000000000000000000000001001000000000001000000000101101101101101101101101101101101101101101000000000001000000000001000001001001000000000010000101101101101101101101101101000000000101000000000000001001001000000000000000000000000000010000101101101000000000000000000000000000101000000000000000000000000001001001000000000000000010101101101101000000000000000000000000000000000001000000000001001000000000001000010010010101101101101101101000000000000000000000000000000001000000000001001000000000001000000000010101110001101101101000000000000000000000000000000001000000000001001000000000001000000000101101111110101101101101000000000000000000000000000001001001001001001000000000001000000000101101101101101101101000000000000000000000000000000001000000000001001000000000001000000000000101101101101101000000000000000000000000000000000001000000000001001000000000001000000000000000000000000000000000000000000000000000000000000000001001001000;
                        }
                    1:
                        //BLUE
                        for(index=0;index<PLAYER_SIZE;index++){
                            index_2 = (player1+index)*Y_OFFSET <= LAST_PIXEL_INDEX ? (player1+index)*Y_OFFSET : LAST_PIXEL_INDEX;
                            led_color.d[index_2] = 1b1;
                        }
                        if(!p1_b1_x[5]){
                            index_2 = Y_OFFSET*p1_b1_y+X_OFFSET*p1_b1_x <= LAST_PIXEL_INDEX ? Y_OFFSET*p1_b1_y+X_OFFSET*p1_b1_x : LAST_PIXEL_INDEX;
                            led_color.d[index_2] = 1b1;
                        }
                        if(!p1_b2_x[5]){
                            index_2 = Y_OFFSET*p1_b2_y+X_OFFSET*p1_b2_x <= LAST_PIXEL_INDEX ? Y_OFFSET*p1_b2_y+X_OFFSET*p1_b2_x : LAST_PIXEL_INDEX;
                            led_color.d[index_2] = 1b1;
                        }
                        if(!p1_b3_x[5]){
                            index_2 = Y_OFFSET*p1_b3_y+X_OFFSET*p1_b3_x <= LAST_PIXEL_INDEX ? Y_OFFSET*p1_b3_y+X_OFFSET*p1_b3_x : LAST_PIXEL_INDEX;
                            led_color.d[index_2] = 1b1;
                        }
                        //RED
                        for(index=0;index<PLAYER_SIZE;index++){
                            index_2 = (player2+index)*Y_OFFSET+PLAYER_OFFSET <= LAST_PIXEL_INDEX ? (player2+index)*Y_OFFSET+PLAYER_OFFSET : LAST_PIXEL_INDEX;
                            led_color.d[index_2+1] = 1b1;
                        }
                        if(!p2_b1_x[5]){
                            index_2 = Y_OFFSET*p2_b1_y+X_OFFSET*p2_b1_x <= LAST_PIXEL_INDEX ? Y_OFFSET*p2_b1_y+X_OFFSET*p2_b1_x : LAST_PIXEL_INDEX;
                            led_color.d[index_2+1] = 1b1;
                        }
                        if(!p2_b2_x[5]){
                            index_2 = Y_OFFSET*p2_b2_y+X_OFFSET*p2_b2_x <= LAST_PIXEL_INDEX ? Y_OFFSET*p2_b2_y+X_OFFSET*p2_b2_x : LAST_PIXEL_INDEX;
                            led_color.d[index_2+1] = 1b1;
                        }
                        if(!p2_b3_x[5]){
                            index_2 = Y_OFFSET*p2_b3_y+X_OFFSET*p2_b3_x <= LAST_PIXEL_INDEX ? Y_OFFSET*p2_b3_y+X_OFFSET*p2_b3_x : LAST_PIXEL_INDEX;
                            led_color.d[index_2+1] = 1b1;
                        }
                    2:
                        if(player_1_won==player_2_won){//draw
                            led_color.d = 1350b
                        }
                        else{//a player won
                            for(index=0;index<79;index++){//base color
                                index_2 = WIN_ARRAY[index]*$clog2(ENCODING_AMOUNT) <= LAST_PIXEL_INDEX ? WIN_ARRAY[index]*$clog2(ENCODING_AMOUNT) : LAST_PIXEL_INDEX;
                                led_color.d[index_2] = player_1_won;
                                led_color.d[index_2+1] = player_2_won;
                            }
                            if(blink){//blink cyan = 110 purple = 011
                                for(index=0;index<66;index++){
                                    index_2 = SHADOW_ARRAY[index]*$clog2(ENCODING_AMOUNT) <= LAST_PIXEL_INDEX ? SHADOW_ARRAY[index]*$clog2(ENCODING_AMOUNT) : LAST_PIXEL_INDEX;
                                    led_color.d[index_2] = player_2_won;
                                    led_color.d[index_2+1] = 1;
                                    led_color.d[index_2+2] = player_1_won;
                                }
                            }
                        }
                    default:
                        led_color.d = 0;
                }
            }
            else{
                for(i = 0; i < 450; i++){
                    index_2 = i*3;
                    led_color.d[index_2] = debug_package[i];
                }
            }
            
            //final output
            color_data = led_color.q;
        }
    }
